/*! catapult-design 2013-09-22 */
!function($) {
    "use strict";
    var Validator = function(options) {
        this.messages = {
            defaultMessage: "This value seems to be invalid.",
            type: {
                email: "This value should be a valid email.",
                url: "This value should be a valid url.",
                urlstrict: "This value should be a valid url.",
                number: "This value should be a valid number.",
                digits: "This value should be digits.",
                dateIso: "This value should be a valid date (YYYY-MM-DD).",
                alphanum: "This value should be alphanumeric.",
                phone: "This value should be a valid phone number."
            },
            notnull: "This value should not be null.",
            notblank: "This value should not be blank.",
            required: "This value is required.",
            regexp: "This value seems to be invalid.",
            min: "This value should be greater than or equal to %s.",
            max: "This value should be lower than or equal to %s.",
            range: "This value should be between %s and %s.",
            minlength: "This value is too short. It should have %s characters or more.",
            maxlength: "This value is too long. It should have %s characters or less.",
            rangelength: "This value length is invalid. It should be between %s and %s characters long.",
            mincheck: "You must select at least %s choices.",
            maxcheck: "You must select %s choices or less.",
            rangecheck: "You must select between %s and %s choices.",
            equalto: "This value should be the same."
        }, this.init(options);
    };
    Validator.prototype = {
        constructor: Validator,
        validators: {
            notnull: function(val) {
                return val.length > 0;
            },
            notblank: function(val) {
                return "string" == typeof val && "" !== val.replace(/^\s+/g, "").replace(/\s+$/g, "");
            },
            required: function(val) {
                if ("object" == typeof val) {
                    for (var i in val) if (this.required(val[i])) return !0;
                    return !1;
                }
                return this.notnull(val) && this.notblank(val);
            },
            type: function(val, type) {
                var regExp;
                switch (type) {
                  case "number":
                    regExp = /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/;
                    break;

                  case "digits":
                    regExp = /^\d+$/;
                    break;

                  case "alphanum":
                    regExp = /^\w+$/;
                    break;

                  case "email":
                    regExp = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))){2,6}$/i;
                    break;

                  case "url":
                    val = new RegExp("(https?|s?ftp|git)", "i").test(val) ? val : "http://" + val;

                  case "urlstrict":
                    regExp = /^(https?|s?ftp|git):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
                    break;

                  case "dateIso":
                    regExp = /^(\d{4})\D?(0[1-9]|1[0-2])\D?([12]\d|0[1-9]|3[01])$/;
                    break;

                  case "phone":
                    regExp = /^((\+\d{1,3}(-| )?\(?\d\)?(-| )?\d{1,5})|(\(?\d{2,6}\)?))(-| )?(\d{3,4})(-| )?(\d{4})(( x| ext)\d{1,5}){0,1}$/;
                    break;

                  default:
                    return !1;
                }
                return "" !== val ? regExp.test(val) : !1;
            },
            regexp: function(val, regExp, self) {
                return new RegExp(regExp, self.options.regexpFlag || "").test(val);
            },
            minlength: function(val, min) {
                return val.length >= min;
            },
            maxlength: function(val, max) {
                return val.length <= max;
            },
            rangelength: function(val, arrayRange) {
                return this.minlength(val, arrayRange[0]) && this.maxlength(val, arrayRange[1]);
            },
            min: function(val, min) {
                return Number(val) >= min;
            },
            max: function(val, max) {
                return Number(val) <= max;
            },
            range: function(val, arrayRange) {
                return val >= arrayRange[0] && val <= arrayRange[1];
            },
            equalto: function(val, elem, self) {
                return self.options.validateIfUnchanged = !0, val === $(elem).val();
            },
            remote: function(val, url, self) {
                var result = null, data = {}, dataType = {};
                data[self.$element.attr("name")] = val, "undefined" != typeof self.options.remoteDatatype && (dataType = {
                    dataType: self.options.remoteDatatype
                });
                var manage = function(isConstraintValid, message) {
                    "undefined" != typeof message && "undefined" != typeof self.Validator.messages.remote && message !== self.Validator.messages.remote && $(self.ulError + " .remote").remove(), 
                    self.updtConstraint({
                        name: "remote",
                        valid: isConstraintValid
                    }, message), self.manageValidationResult();
                }, handleResponse = function(response) {
                    if ("object" == typeof response) return response;
                    try {
                        response = $.parseJSON(response);
                    } catch (err) {}
                    return response;
                }, manageErrorMessage = function(response) {
                    return "object" == typeof response && null !== response ? "undefined" != typeof response.error ? response.error : "undefined" != typeof response.message ? response.message : null : null;
                };
                return $.ajax($.extend({}, {
                    url: url,
                    data: data,
                    type: self.options.remoteMethod || "GET",
                    success: function(response) {
                        response = handleResponse(response), manage(1 === response || !0 === response || "object" == typeof response && null !== response && "undefined" != typeof response.success, manageErrorMessage(response));
                    },
                    error: function(response) {
                        response = handleResponse(response), manage(!1, manageErrorMessage(response));
                    }
                }, dataType)), result;
            },
            mincheck: function(obj, val) {
                return this.minlength(obj, val);
            },
            maxcheck: function(obj, val) {
                return this.maxlength(obj, val);
            },
            rangecheck: function(obj, arrayRange) {
                return this.rangelength(obj, arrayRange);
            }
        },
        init: function(options) {
            var key, customValidators = options.validators, customMessages = options.messages;
            for (key in customValidators) this.addValidator(key, customValidators[key]);
            for (key in customMessages) this.addMessage(key, customMessages[key]);
        },
        formatMesssage: function(message, args) {
            if ("object" == typeof args) {
                for (var i in args) message = this.formatMesssage(message, args[i]);
                return message;
            }
            return "string" == typeof message ? message.replace(new RegExp("%s", "i"), args) : "";
        },
        addValidator: function(name, fn) {
            this.validators[name] = fn;
        },
        addMessage: function(key, message, type) {
            if ("undefined" != typeof type && !0 === type) return this.messages.type[key] = message, 
            void 0;
            if ("type" !== key) this.messages[key] = message; else for (var i in message) this.messages.type[i] = message[i];
        }
    };
    var ParsleyField = function(element, options, type) {
        return this.options = options, this.Validator = new Validator(options), "ParsleyFieldMultiple" === type ? this : (this.init(element, type || "ParsleyField"), 
        void 0);
    };
    ParsleyField.prototype = {
        constructor: ParsleyField,
        init: function(element, type) {
            this.type = type, this.valid = !0, this.element = element, this.validatedOnce = !1, 
            this.$element = $(element), this.val = this.$element.val(), this.isRequired = !1, 
            this.constraints = {}, "undefined" == typeof this.isRadioOrCheckbox && (this.isRadioOrCheckbox = !1, 
            this.hash = this.generateHash(), this.errorClassHandler = this.options.errors.classHandler(element, this.isRadioOrCheckbox) || this.$element), 
            this.ulErrorManagement(), this.bindHtml5Constraints(), this.addConstraints(), this.hasConstraints() && this.bindValidationEvents();
        },
        setParent: function(elem) {
            this.$parent = $(elem);
        },
        getParent: function() {
            return this.$parent;
        },
        bindHtml5Constraints: function() {
            (this.$element.hasClass("required") || this.$element.prop("required")) && (this.options.required = !0), 
            "undefined" != typeof this.$element.attr("type") && new RegExp(this.$element.attr("type"), "i").test("email url number range") && (this.options.type = this.$element.attr("type"), 
            new RegExp(this.options.type, "i").test("number range") && (this.options.type = "number", 
            "undefined" != typeof this.$element.attr("min") && this.$element.attr("min").length && (this.options.min = this.$element.attr("min")), 
            "undefined" != typeof this.$element.attr("max") && this.$element.attr("max").length && (this.options.max = this.$element.attr("max")))), 
            "string" == typeof this.$element.attr("pattern") && this.$element.attr("pattern").length && (this.options.regexp = this.$element.attr("pattern"));
        },
        addConstraints: function() {
            for (var constraint in this.options) {
                var addConstraint = {};
                addConstraint[constraint] = this.options[constraint], this.addConstraint(addConstraint, !0);
            }
        },
        addConstraint: function(constraint, doNotUpdateValidationEvents) {
            for (var name in constraint) name = name.toLowerCase(), "function" == typeof this.Validator.validators[name] && (this.constraints[name] = {
                name: name,
                requirements: constraint[name],
                valid: null
            }, "required" === name && (this.isRequired = !0), this.addCustomConstraintMessage(name));
            "undefined" == typeof doNotUpdateValidationEvents && this.bindValidationEvents();
        },
        updateConstraint: function(constraint, message) {
            for (var name in constraint) this.updtConstraint({
                name: name,
                requirements: constraint[name],
                valid: null
            }, message);
        },
        updtConstraint: function(constraint, message) {
            this.constraints[constraint.name] = $.extend(!0, this.constraints[constraint.name], constraint), 
            "string" == typeof message && (this.Validator.messages[constraint.name] = message), 
            this.bindValidationEvents();
        },
        removeConstraint: function(constraintName) {
            var constraintName = constraintName.toLowerCase();
            return delete this.constraints[constraintName], "required" === constraintName && (this.isRequired = !1), 
            this.hasConstraints() ? (this.bindValidationEvents(), void 0) : "ParsleyForm" == typeof this.getParent() ? (this.getParent().removeItem(this.$element), 
            void 0) : (this.destroy(), void 0);
        },
        addCustomConstraintMessage: function(constraint) {
            var customMessage = constraint + ("type" === constraint && "undefined" != typeof this.options[constraint] ? this.options[constraint].charAt(0).toUpperCase() + this.options[constraint].substr(1) : "") + "Message";
            "undefined" != typeof this.options[customMessage] && this.Validator.addMessage("type" === constraint ? this.options[constraint] : constraint, this.options[customMessage], "type" === constraint);
        },
        bindValidationEvents: function() {
            this.valid = null, this.$element.addClass("parsley-validated"), this.$element.off("." + this.type), 
            this.options.remote && !new RegExp("change", "i").test(this.options.trigger) && (this.options.trigger = this.options.trigger ? " change" : "change");
            var triggers = (this.options.trigger ? this.options.trigger : "") + (new RegExp("key", "i").test(this.options.trigger) ? "" : " keyup");
            this.$element.is("select") && (triggers += new RegExp("change", "i").test(triggers) ? "" : " change"), 
            triggers = triggers.replace(/^\s+/g, "").replace(/\s+$/g, ""), this.$element.on((triggers + " ").split(" ").join("." + this.type + " "), !1, $.proxy(this.eventValidation, this));
        },
        generateHash: function() {
            return "parsley-" + (Math.random() + "").substring(2);
        },
        getHash: function() {
            return this.hash;
        },
        getVal: function() {
            return this.$element.data("value") || this.$element.val();
        },
        eventValidation: function(event) {
            var val = this.getVal();
            return "keyup" !== event.type || /keyup/i.test(this.options.trigger) || this.validatedOnce ? "change" !== event.type || /change/i.test(this.options.trigger) || this.validatedOnce ? !this.isRadioOrCheckbox && this.getLength(val) < this.options.validationMinlength && !this.validatedOnce ? !0 : (this.validate(), 
            void 0) : !0 : !0;
        },
        getLength: function(val) {
            return val && val.hasOwnProperty("length") ? val.length : 0;
        },
        isValid: function() {
            return this.validate(!1);
        },
        hasConstraints: function() {
            for (var constraint in this.constraints) return !0;
            return !1;
        },
        validate: function(errorBubbling) {
            var val = this.getVal(), valid = null;
            return this.hasConstraints() ? this.options.listeners.onFieldValidate(this.element, this) || "" === val && !this.isRequired ? (this.reset(), 
            null) : this.needsValidation(val) ? (valid = this.applyValidators(), ("undefined" != typeof errorBubbling ? errorBubbling : this.options.showErrors) && this.manageValidationResult(), 
            valid) : this.valid : null;
        },
        needsValidation: function(val) {
            return !this.options.validateIfUnchanged && null !== this.valid && this.val === val && this.validatedOnce ? !1 : (this.val = val, 
            this.validatedOnce = !0);
        },
        applyValidators: function() {
            var valid = null;
            for (var constraint in this.constraints) {
                var result = this.Validator.validators[this.constraints[constraint].name](this.val, this.constraints[constraint].requirements, this);
                !1 === result ? (valid = !1, this.constraints[constraint].valid = valid, this.options.listeners.onFieldError(this.element, this.constraints, this)) : !0 === result && (this.constraints[constraint].valid = !0, 
                valid = !1 !== valid, !1 === this.options.listeners.onFieldSuccess(this.element, this.constraints, this) && (valid = !1));
            }
            return valid;
        },
        manageValidationResult: function() {
            var valid = null;
            for (var constraint in this.constraints) !1 === this.constraints[constraint].valid ? (this.manageError(this.constraints[constraint]), 
            valid = !1) : !0 === this.constraints[constraint].valid && (this.removeError(this.constraints[constraint].name), 
            valid = !1 !== valid);
            return this.valid = valid, !0 === this.valid ? (this.removeErrors(), this.errorClassHandler.removeClass(this.options.errorClass).addClass(this.options.successClass), 
            !0) : !1 === this.valid ? (this.errorClassHandler.removeClass(this.options.successClass).addClass(this.options.errorClass), 
            !1) : (this.ulError && 0 === $(this.ulError).children().length && this.removeErrors(), 
            valid);
        },
        ulErrorManagement: function() {
            this.ulError = "#" + this.hash, this.ulTemplate = $(this.options.errors.errorsWrapper).attr("id", this.hash).addClass("parsley-error-list");
        },
        removeError: function(constraintName) {
            var liError = this.ulError + " ." + constraintName, that = this;
            this.options.animate ? $(liError).fadeOut(this.options.animateDuration, function() {
                $(this).remove(), that.ulError && 0 === $(that.ulError).children().length && that.removeErrors();
            }) : $(liError).remove();
        },
        addError: function(error) {
            for (var constraint in error) {
                var liTemplate = $(this.options.errors.errorElem).addClass(constraint);
                $(this.ulError).append(this.options.animate ? $(liTemplate).html(error[constraint]).hide().fadeIn(this.options.animateDuration) : $(liTemplate).html(error[constraint]));
            }
        },
        removeErrors: function() {
            this.options.animate ? $(this.ulError).fadeOut(this.options.animateDuration, function() {
                $(this).remove();
            }) : $(this.ulError).remove();
        },
        reset: function() {
            this.valid = null, this.removeErrors(), this.validatedOnce = !1, this.errorClassHandler.removeClass(this.options.successClass).removeClass(this.options.errorClass);
            for (var constraint in this.constraints) this.constraints[constraint].valid = null;
            return this;
        },
        manageError: function(constraint) {
            if ($(this.ulError).length || this.manageErrorContainer(), !("required" === constraint.name && null !== this.getVal() && this.getVal().length > 0 || this.isRequired && "required" !== constraint.name && (null === this.getVal() || 0 === this.getVal().length))) {
                var constraintName = constraint.name, liClass = !1 !== this.options.errorMessage ? "custom-error-message" : constraintName, liError = {}, message = !1 !== this.options.errorMessage ? this.options.errorMessage : "type" === constraint.name ? this.Validator.messages[constraintName][constraint.requirements] : "undefined" == typeof this.Validator.messages[constraintName] ? this.Validator.messages.defaultMessage : this.Validator.formatMesssage(this.Validator.messages[constraintName], constraint.requirements);
                $(this.ulError + " ." + liClass).length || (liError[liClass] = message, this.addError(liError));
            }
        },
        manageErrorContainer: function() {
            var errorContainer = this.options.errorContainer || this.options.errors.container(this.element, this.isRadioOrCheckbox), ulTemplate = this.options.animate ? this.ulTemplate.show() : this.ulTemplate;
            return "undefined" != typeof errorContainer ? ($(errorContainer).append(ulTemplate), 
            void 0) : (this.isRadioOrCheckbox ? this.$element.parent().after(ulTemplate) : this.$element.after(ulTemplate), 
            void 0);
        },
        addListener: function(object) {
            for (var listener in object) this.options.listeners[listener] = object[listener];
        },
        destroy: function() {
            this.$element.removeClass("parsley-validated"), this.reset().$element.off("." + this.type).removeData(this.type);
        }
    };
    var ParsleyFieldMultiple = function(element, options, type) {
        this.initMultiple(element, options), this.inherit(element, options), this.Validator = new Validator(options), 
        this.init(element, type || "ParsleyFieldMultiple");
    };
    ParsleyFieldMultiple.prototype = {
        constructor: ParsleyFieldMultiple,
        initMultiple: function(element, options) {
            this.element = element, this.$element = $(element), this.group = options.group || !1, 
            this.hash = this.getName(), this.siblings = this.group ? '[data-group="' + this.group + '"]' : 'input[name="' + this.$element.attr("name") + '"]', 
            this.isRadioOrCheckbox = !0, this.isRadio = this.$element.is("input[type=radio]"), 
            this.isCheckbox = this.$element.is("input[type=checkbox]"), this.errorClassHandler = options.errors.classHandler(element, this.isRadioOrCheckbox) || this.$element.parent();
        },
        inherit: function(element, options) {
            var clone = new ParsleyField(element, options, "ParsleyFieldMultiple");
            for (var property in clone) "undefined" == typeof this[property] && (this[property] = clone[property]);
        },
        getName: function() {
            if (this.group) return "parsley-" + this.group;
            if ("undefined" == typeof this.$element.attr("name")) throw "A radio / checkbox input must have a data-group attribute or a name to be Parsley validated !";
            return "parsley-" + this.$element.attr("name").replace(/(:|\.|\[|\])/g, "");
        },
        getVal: function() {
            if (this.isRadio) return $(this.siblings + ":checked").val() || "";
            if (this.isCheckbox) {
                var values = [];
                return $(this.siblings + ":checked").each(function() {
                    values.push($(this).val());
                }), values;
            }
        },
        bindValidationEvents: function() {
            this.valid = null, this.$element.addClass("parsley-validated"), this.$element.off("." + this.type);
            var self = this, triggers = (this.options.trigger ? this.options.trigger : "") + (new RegExp("change", "i").test(this.options.trigger) ? "" : " change");
            triggers = triggers.replace(/^\s+/g, "").replace(/\s+$/g, ""), $(this.siblings).each(function() {
                $(this).on(triggers.split(" ").join("." + self.type + " "), !1, $.proxy(self.eventValidation, self));
            });
        }
    };
    var ParsleyForm = function(element, options, type) {
        this.init(element, options, type || "parsleyForm");
    };
    ParsleyForm.prototype = {
        constructor: ParsleyForm,
        init: function(element, options, type) {
            this.type = type, this.items = [], this.$element = $(element), this.options = options;
            var self = this;
            this.$element.find(options.inputs).each(function() {
                self.addItem(this);
            }), this.$element.on("submit." + this.type, !1, $.proxy(this.validate, this));
        },
        addListener: function(object) {
            for (var listener in object) if (new RegExp("Field").test(listener)) for (var item = 0; item < this.items.length; item++) this.items[item].addListener(object); else this.options.listeners[listener] = object[listener];
        },
        addItem: function(elem) {
            if ($(elem).is(this.options.excluded)) return !1;
            var ParsleyField = $(elem).parsley(this.options);
            ParsleyField.setParent(this), this.items.push(ParsleyField);
        },
        removeItem: function(elem) {
            for (var parsleyItem = $(elem).parsley(), i = 0; i < this.items.length; i++) if (this.items[i].hash === parsleyItem.hash) return this.items[i].destroy(), 
            this.items.splice(i, 1), !0;
            return !1;
        },
        validate: function(event) {
            var valid = !0;
            this.focusedField = !1;
            for (var item = 0; item < this.items.length; item++) "undefined" != typeof this.items[item] && !1 === this.items[item].validate() && (valid = !1, 
            (!this.focusedField && "first" === this.options.focus || "last" === this.options.focus) && (this.focusedField = this.items[item].$element));
            this.focusedField && !valid && this.focusedField.focus();
            var onFormSubmit = this.options.listeners.onFormSubmit(valid, event, this);
            return "undefined" != typeof onFormSubmit ? onFormSubmit : valid;
        },
        isValid: function() {
            for (var item = 0; item < this.items.length; item++) if (!1 === this.items[item].isValid()) return !1;
            return !0;
        },
        removeErrors: function() {
            for (var item = 0; item < this.items.length; item++) this.items[item].parsley("reset");
        },
        destroy: function() {
            for (var item = 0; item < this.items.length; item++) this.items[item].destroy();
            this.$element.off("." + this.type).removeData(this.type);
        },
        reset: function() {
            for (var item = 0; item < this.items.length; item++) this.items[item].reset();
        }
    }, $.fn.parsley = function(option, fn) {
        function bind(self, type) {
            var parsleyInstance = $(self).data(type);
            if (!parsleyInstance) {
                switch (type) {
                  case "parsleyForm":
                    parsleyInstance = new ParsleyForm(self, options, "parsleyForm");
                    break;

                  case "parsleyField":
                    parsleyInstance = new ParsleyField(self, options, "parsleyField");
                    break;

                  case "parsleyFieldMultiple":
                    parsleyInstance = new ParsleyFieldMultiple(self, options, "parsleyFieldMultiple");
                    break;

                  default:
                    return;
                }
                $(self).data(type, parsleyInstance);
            }
            if ("string" == typeof option && "function" == typeof parsleyInstance[option]) {
                var response = parsleyInstance[option](fn);
                return "undefined" != typeof response ? response : $(self);
            }
            return parsleyInstance;
        }
        var options = $.extend(!0, {}, $.fn.parsley.defaults, "undefined" != typeof window.ParsleyConfig ? window.ParsleyConfig : {}, option, this.data()), newInstance = null;
        return $(this).is("form") || !0 === $(this).data("bind") ? newInstance = bind($(this), "parsleyForm") : $(this).is(options.inputs) && !$(this).is(options.excluded) && (newInstance = bind($(this), $(this).is("input[type=radio], input[type=checkbox]") ? "parsleyFieldMultiple" : "parsleyField")), 
        "function" == typeof fn ? fn() : newInstance;
    }, $.fn.parsley.Constructor = ParsleyForm, $.fn.parsley.defaults = {
        inputs: "input, textarea, select",
        excluded: "input[type=hidden], input[type=file], :disabled",
        trigger: !1,
        animate: !0,
        animateDuration: 300,
        focus: "first",
        validationMinlength: 3,
        successClass: "parsley-success",
        errorClass: "parsley-error",
        errorMessage: !1,
        validators: {},
        showErrors: !0,
        messages: {},
        validateIfUnchanged: !1,
        errors: {
            classHandler: function() {},
            container: function() {},
            errorsWrapper: "<ul></ul>",
            errorElem: "<li></li>"
        },
        listeners: {
            onFieldValidate: function() {
                return !1;
            },
            onFormSubmit: function() {},
            onFieldError: function() {},
            onFieldSuccess: function() {}
        }
    }, $(window).on("load", function() {
        $('[data-validate="parsley"]').each(function() {
            $(this).parsley();
        });
    });
}(window.jQuery || window.Zepto);

var map = {
    init: function() {
        function handleLocationsLoaded(data) {
            _projectsData = data.posts;
            var dupes = [];
            _.each(_projectsData, function(elem) {
                elem.acf.locations && elem.acf.locations.length && _.each(elem.acf.locations, function(elem2) {
                    var copy = _.clone(elem);
                    copy.location = {
                        address: elem2.location.address,
                        coordinates: elem2.location.coordinates
                    }, dupes.push(copy);
                });
            }), _projectsData = dupes;
            for (var i = 0; i < _projectsData.length; i++) addMarker(_projectsData[i]);
            _map.addLayer(_markers);
        }
        function addMarker(data) {
            var loc = data.location;
            if ("undefined" != typeof loc) {
                var latlon = loc.coordinates.split(","), marker = new L.Marker([ latlon[0], latlon[1] ], {
                    icon: _mapIcon,
                    clickable: !0,
                    riseOnHover: !0
                });
                _markers.addLayer(marker), marker.cataInfo = data, marker.on("click", handleMarkerClick);
            }
        }
        function filterCasestudies(data, category) {
            return _.filter(data, function(post) {
                return post.categories[0].slug == category;
            });
        }
        function redrawMarkersWithFilter(filter) {
            var filteredData = "all" === filter ? _projectsData : filterCasestudies(_projectsData, filter);
            console.log("filter: " + filter), $(".leaflet-marker-icon").length > 0 ? $(".leaflet-marker-icon, .leaflet-marker-shadow").transition({
                opacity: 0
            }, 300, function() {
                redrawMarkerDone(filteredData);
            }) : redrawMarkerDone(filteredData);
        }
        function redrawMarkerDone(filteredData) {
            _markers.clearLayers();
            for (var i = 0, len = filteredData.length; len > i; i++) addMarker(filteredData[i]);
            _map.setZoom(2, {
                animate: !0
            });
        }
        function handleMarkerClick(event) {
            console.log(event), console.log("Clicked on marker: " + event.latlng), console.log("Marker coordinates: " + _map.latLngToContainerPoint(event.latlng)), 
            console.log("Marker coordinates: " + _map.latLngToLayerPoint(event.latlng)), console.log("Marker coordinates: " + _map.project(event.latlng)), 
            _map.setView(event.latlng, _map.getZoom(), {
                pan: {
                    animate: !0
                },
                zoom: {
                    animate: !0
                }
            }), hideMapCallout(), showMapCallout(event.target.cataInfo);
        }
        function showMapCallout(data) {
            _callout.removeClass("hide");
            var img = $('<img src="/wp-content/themes/catapult/getimageurl.php?imageID=' + data.custom_fields.image[0] + '&width=200&height=200" />'), loc = data.location.address, $h2 = _callout.find("h2");
            if ($h2.parent().is("a") && $h2.unwrap(), "undefined" != typeof data.custom_fields.disabled && "0" === data.custom_fields.disabled[0]) {
                var $link = $('<a href="' + data.url + '" id="js-map-callout-link"></a>');
                $h2.wrap($link), setTimeout(function() {
                    $h2.text($h2.text() + " »");
                }, 100);
            }
            _callout.find(".map-callout-img").append(img), $h2.append(data.title), _callout.find("h3").append(loc), 
            "undefined" != typeof data.custom_fields.slug && _callout.find("p").append(data.custom_fields.slug);
        }
        function hideMapCallout() {
            _callout.addClass("hide"), _callout.find("img").remove(), _callout.find("h2").empty(), 
            _callout.find("h3").empty(), _callout.find("p").empty();
        }
        var _map = new L.Map("locations-map", {
            scrollWheelZoom: !1
        }), mapWidth = $("#locations-map").width();
        450 >= mapWidth ? _map.setView([ 1.40611, 2.8125 ], 0) : mapWidth > 450 && 768 >= mapWidth ? _map.setView([ -5.61599, 12.30469 ], 1) : _map.setView([ 13.662, 10.019 ], 2), 
        L.tileLayer("http://{s}.tile.cloudmade.com/e92b182bf4084fa88391e1b310961939/103976/256/{z}/{x}/{y}.png", {
            maxZoom: 10
        }).addTo(_map);
        var _callout = $("#map-callout"), _mapIcon = L.icon({
            iconUrl: "/wp-content/themes/catapult/js/libs/leaflet/images/marker-icon.png",
            iconRetinaUrl: "/wp-content/themes/catapult/js/libs/leaflet/images/marker-icon.png",
            iconSize: [ 33, 39 ],
            iconAnchor: [ 16, 39 ],
            popupAnchor: [ -3, -20 ],
            shadowUrl: "/wp-content/themes/catapult/js/libs/leaflet/images/marker-shadow.png",
            shadowRetinaUrl: "/wp-content/themes/catapult/js/libs/leaflet/images/marker-shadow.png",
            shadowSize: [ 41, 41 ],
            shadowAnchor: [ 16, 39 ]
        }), _locsURL = "/api/get_posts/?post_type=project&custom_fields=client_name,disabled,slug,category,locations,image&count=-1&callback=?", _markers = new L.MarkerClusterGroup(), _projectsData = {};
        _map.on("click", function() {
            console.log("Zoom: " + _map.getZoom()), console.log("LatLng: " + _map.getCenter()), 
            hideMapCallout();
        }), _map.on("dragstart", function() {
            hideMapCallout();
        }), _map.on("zoomstart", function() {
            console.log("Zoom: " + _map.getZoom()), console.log("LatLng: " + _map.getCenter()), 
            hideMapCallout();
        }), $.getJSON(_locsURL, handleLocationsLoaded), _callout.find(".close-button").on("click", function(event) {
            event.preventDefault(), hideMapCallout();
        }), $("#js-location-filter-all, #js-location-filter-energy, #js-location-filter-enterprise, #js-location-filter-health-agriculture, #js-location-filter-mobility, #js-location-filter-water-sanitation").on("click", function(event) {
            "undefined" != typeof event && event.preventDefault(), $(".location-filter").removeClass("active"), 
            $(this).addClass("active"), redrawMarkersWithFilter($(this).data("tag"));
        });
    }
}, team = {
    _teamData: null,
    _dataLength: 0,
    _rootURL: "",
    init: function(teamData, rootURL) {
        this._rootURL = rootURL, this._teamData = teamData, this._dataLength = this._teamData.length;
        var self = this;
        $(".team-member").on("click", function(event) {
            event.preventDefault();
            for (var index = $(this).find("h3").text(), i = 0; i < self._dataLength; i++) if (index === self._teamData[i].title) {
                var headshotURL = $(this).find(".team-member-headshot").attr("src");
                $(".overlay").find(".overlay-content").empty().append(self.getOverlayTemplate(self._teamData[i], headshotURL));
                break;
            }
            return $(".overlay").removeClass("hide").addClass("show").focus(), $(document).keyup(function(event) {
                27 === event.keyCode && $(".overlay").removeClass("show").addClass("hide").find(".overlay-content").empty();
            }), !1;
        });
    },
    getOverlayTemplate: function(teamMember, headshotURL) {
        var twitter = teamMember.custom_fields.twitter_handle[0], twitterSnippet = "";
        "" != twitter && (twitterSnippet = '<h3 class="overlay-twitter">Twitter: <a href="https://twitter.com/' + twitter + '">@' + twitter + "</a></h3>");
        var template = '<h1 class="overlay-name header-title">' + teamMember.title + "</h1>" + '<h2 class="overlay-title">' + teamMember.custom_fields.job_title[0] + ", " + teamMember.custom_fields.company_name[0] + "</h2>" + twitterSnippet + '<img src="' + headshotURL + '" alt="" class="overlay-headshot" />' + '<p class="overlay-body">' + teamMember.content + "</p>";
        return template;
    }
}, donations = {
    _donationForm: null,
    _formBody: null,
    _amountForm: null,
    _creditCardInfo: null,
    _billingInfo: null,
    _debug: !1,
    init: function() {
        var self = this;
        this._donationForm = $("#donation-form"), this._formBody = $("#donation-form-body"), 
        this._amountForm = $("#donation-amount-form"), this._creditCardInfo = $("#js-donation-credit-card-info"), 
        this._billingInfo = $("#js-donation-billing-info");
        var amount = $("#donation-amount"), fullName = $("#card-full-name"), cardNum = $("#card-number"), cardCVV = $("#card-cvv"), expireMonth = $("#card-expiration-month"), expireYear = $("#card-expiration-year"), street = $("#billing-street"), city = $("#billing-city"), state = $("#billing-state"), zip = $("#billing-zipcode"), phone = $("#billing-telephone"), email = $("#billing-email");
        this._debug === !0 && (amount.val(1), fullName.val("Laurence Lague"), cardNum.val("4242424242424242"), 
        cardCVV.val("123"), expireMonth.val("12"), expireYear.val("2015"), street.val("1 My Street"), 
        city.val("San Francisco"), state.val("CA"), zip.val("94111"), phone.val("415-555-1212"), 
        email.val("ha@ha.com")), "true" === formError ? (console.log("There is a form error... " + formError), 
        this._formBody.removeClass("hide").addClass("show"), $("html, body").animate({
            scrollTop: 4750
        }, 500), $(".overlay").removeClass("hide").addClass("show").find(".overlay-content").empty().html('<h1 class="header-title overlay-title">Whoops!</h1><p class="overlay-body">' + formErrorMessage + "</p>" + '<p class="overlay-body">Please check the form fields, and try again. Your card was not charged.</p>')) : console.log("There was NOT a form error: " + formError), 
        this._amountForm.parsley({
            listeners: {
                onFormSubmit: function(isFormValid, event) {
                    return event.preventDefault(), isFormValid === !0 && ($("#donation-amount-submit").hide(), 
                    self._formBody.removeClass("hide").addClass("show")), !1;
                }
            }
        }), this._donationForm.parsley({
            listeners: {
                onFormSubmit: function(isFormValid, event) {
                    return event.preventDefault(), isFormValid === !0 && ($("#donation-form-submit").prop("disabled", !0).addClass("disabled"), 
                    $("#donation-amount-hidden").val($("#donation-amount").val()), Stripe.createToken({
                        number: $("#card-number").val(),
                        cvc: $("#card-cvv").val(),
                        exp_month: $("#card-expiration-month").val(),
                        exp_year: $("#card-expiration-year").val()
                    }, donations.stripeResponseHandler)), !1;
                }
            }
        }), "undefined" != typeof enquire && enquire.register("screen and (max-width: 756x)", {
            match: function() {
                $.each([ self._creditCardInfo, self._billingInfo ], function(index, value) {
                    value.removeClass("two-col padded margin-right").addClass("one-col");
                });
            },
            unmatch: function() {
                $.each([ self._creditCardInfo, self._billingInfo ], function(index, value) {
                    value.removeClass("one-col").addClass("two-col padded margin-right");
                });
            }
        }).listen();
    },
    stripeResponseHandler: function(status, response) {
        if (console.log("Stripe has returned!"), console.log(status), console.log(response), 
        response.error) console.log("There was an error submitting the form to Stripe."); else {
            console.log("Submitting Stripe form...");
            var token = response.id;
            donations._donationForm.append($('<input type="hidden" name="stripeToken" />').val(token)), 
            donations._donationForm.get(0).submit();
        }
    }
};

$(document).ready(function() {
    var _shouldShowBigLogo = !0;
    cataCommon.init(), $(window).scroll(function() {
        var scrollPos = $(this).scrollTop();
        scrollPos > 100 || $(window).width() <= 350 ? ($(".logo .logo--full").removeClass("show").addClass("hide"), 
        $(".logo .logo--partial").removeClass("hide").addClass("show"), $(".mainnav, .header").addClass("compact"), 
        $("#header-drawer").removeClass("show peek hide").addClass("compact")) : (_shouldShowBigLogo && ($(".logo .logo--full").removeClass("hide").addClass("show"), 
        $(".logo .logo--partial").removeClass("show").addClass("hide")), $(".mainnav, .header").removeClass("compact"), 
        $("#header-drawer").removeClass("show peek hide compact").addClass("hide"));
    }), "undefined" != typeof enquire && enquire.register("screen and (max-width: 720px)", {
        match: function() {
            _shouldShowBigLogo = !1, $(".logo .logo--full").removeClass("show").addClass("hide"), 
            $(".logo .logo--partial").removeClass("hide").addClass("show");
        },
        unmatch: function() {
            _shouldShowBigLogo = !0, $(".logo .logo--full").removeClass("hide").addClass("show"), 
            $(".logo .logo--partial").removeClass("show").addClass("hide");
        }
    });
    var $navItems = $("#projects, #team, #contact, #donate");
    $navItems.waypoint(function() {
        $(".mainnav-item").find("a").removeClass("active"), $("#mainnav-" + $(this).attr("id")).find("a").addClass("active");
    }), $("#slides").slidesjs({
        width: 900,
        height: 506
    }), map.init();
    var teamURL = "/api/get_posts/?post_type=teammember&custom_fields=level,job_title,company_name,excerpt,headshot,twitter_handle&count=20&callback=?";
    $.getJSON(teamURL, function() {}).done(function(json) {
        console.log("Successfully loaded the team data."), team.init(json.posts, cataCommon.getRootURL());
    }).fail(function(jqxhr, textStatus, error) {
        console.log("There was an error loading the team json:"), console.log(error);
    }), donations.init();
});